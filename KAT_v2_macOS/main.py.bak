#!/usr/bin/env python
# coding: utf-8

# In[1]:


import sys
import os
import subprocess
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QPushButton,
    QTabWidget, QFileDialog, QVBoxLayout, QHBoxLayout, QTextEdit,
    QGridLayout, QMainWindow, QTreeWidget, QTreeWidgetItem, QComboBox, QGroupBox, QSizePolicy, QGraphicsOpacityEffect
)
from PyQt5.QtGui import QPixmap, QFont, QPalette, QColor, QImage
from PyQt5.QtCore import Qt


# In[2]:


if getattr(sys, 'frozen', False):
    BASE_DIR = sys._MEIPASS  # for PyInstaller
else:
    BASE_DIR = os.path.dirname(os.path.abspath('__file__'))

SCRIPTS_DIR = os.path.join(BASE_DIR, 'scripts')

WORKING_DIR = os.getcwd()

#os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = os.path.join(BASE_DIR, 'platforms')
#subprocess.run("echo $QT_QPA_PLATFORM_PLUGIN_PATH", shell=True)

class HelpWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Help")
        self.setGeometry(200, 200, 400, 300)
        layout = QVBoxLayout()
        help_text = QLabel(
            "Welcome to KAT, the Kinetic Analysis Toolkit!\n"
            "To generate a kinetic curve following either Hill or Michelis-Menten kinetics, follow these steps:\n"
            "1. Create a .csv file with values for fluorescence or absorbance that follows [Time] [Temp] [Data].\n"
            "2. Give the output graph file a name.\n"
            "3. Specify a path to the data in a .csv format.\n"
            "4. Specify the kind of data you have collected (absorbance vs. fluorescence).\n"
            "5. Input the information about the substrate concentrations used (must be serially diluted).\n"
            "6. Input the information about the time-course to sample.\n"
            "        Warning: Time step must evenly divide the difference between Time Min and Time Max \n"
            "        (the quotient being the minutes between slope calculations).\n"
            "7. Select the columns to read data from.\n"
            "8. Click either *Graph Averages* or *Graph Best-Fit* for Hill or Michelis-Menten Kinetics.\n"
            "9. Click *Display Graph* to open the graph output."
        )
        help_text.setFont(QFont("Times New Roman", 14))
        layout.addWidget(help_text)
        self.setLayout(layout)

class KineticAnalysisTool(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Kinetic Analysis Tool (KAT)")
        self.setGeometry(100, 100, 1200, 900)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        palette = self.central_widget.palette()
        palette.setColor(QPalette.Window, QColor("#f0f4f8"))
        self.central_widget.setAutoFillBackground(True)
        self.central_widget.setPalette(palette)

        # Main horizontal layout: left (inputs), middle (columns + instructions), right (tabs)
        main_layout = QHBoxLayout(self.central_widget)

        # Left side layout: inputs
        left_layout = QVBoxLayout()

        input_form = QGridLayout()

        self.output_name_input = QLineEdit()
        self.output_name_input.setMaximumWidth(150)
        input_form.addWidget(QLabel("Output Filename:"), 0, 0)
        input_form.addWidget(self.output_name_input, 0, 1)

        self.file_path_input = QLineEdit()
        self.file_path_input.setMaximumWidth(250)
        self.file_path_button = QPushButton("Browse CSV")
        self.file_path_button.setMaximumWidth(100)
        self.file_path_button.clicked.connect(self.select_file)
        input_form.addWidget(QLabel("CSV File Path:"), 1, 0)
        input_form.addWidget(self.file_path_input, 1, 1)
        input_form.addWidget(self.file_path_button, 1, 2)

        self.data_type_combo = QComboBox()
        self.data_type_combo.setMaximumWidth(150)
        self.data_type_combo.addItems(["Absorbance", "Fluorescence"])
        input_form.addWidget(QLabel("Kinetic Data Type:"), 2, 0)
        input_form.addWidget(self.data_type_combo, 2, 1)

        left_layout.addLayout(input_form)

        # Substrate Info Group
        substrate_group = QGroupBox("Substrate Information")
        substrate_group.setStyleSheet("QGroupBox { background-color: #b4dfff; border: 1px solid #4db2ff; padding: 10px; }")
        substrate_layout = QGridLayout()
        self.substrate_number = QLineEdit()
        self.substrate_number.setMaximumWidth(100)
        self.substrate_dilution = QLineEdit()
        self.substrate_dilution.setMaximumWidth(100)
        self.substrate_max = QLineEdit()
        self.substrate_max.setMaximumWidth(100)
        
        substrate_layout.addWidget(QLabel("# Substrate Concentrations:"), 0, 0)
        substrate_layout.addWidget(self.substrate_number, 0, 1)
        substrate_layout.addWidget(QLabel("Dilution Factor:"), 1, 0)
        substrate_layout.addWidget(self.substrate_dilution, 1, 1)
        substrate_layout.addWidget(QLabel("Max Substrate Conc. (uM):"), 2, 0)
        substrate_layout.addWidget(self.substrate_max, 2, 1)
        substrate_group.setLayout(substrate_layout)
        left_layout.addWidget(substrate_group)

        # Time-course Info Group
        time_group = QGroupBox("Time-Course Information")
        time_group.setStyleSheet("QGroupBox { background-color: #ffc5c0; border: 1px solid #ff746a; padding: 10px; }")
        #fff0e6; border: 1px solid #ff9933; padding: 10px; }")
        time_layout = QGridLayout()
        self.time_min = QLineEdit()
        self.time_min.setMaximumWidth(100)
        self.time_max = QLineEdit()
        self.time_max.setMaximumWidth(100)
        self.time_step = QLineEdit()
        self.time_step.setMaximumWidth(100)

        time_layout.addWidget(QLabel("Time Min (min):"), 0, 0)
        time_layout.addWidget(self.time_min, 0, 1)
        time_layout.addWidget(QLabel("Time Max (min):"), 1, 0)
        time_layout.addWidget(self.time_max, 1, 1)
        time_layout.addWidget(QLabel("Time Step (min):"), 2, 0)
        time_layout.addWidget(self.time_step, 2, 1)
        time_group.setLayout(time_layout)
        left_layout.addWidget(time_group)

        logos_group = QGroupBox()
        logos_group.setStyleSheet("QGroupBox { background-color: #f0f4f8; border: 1px solid #f0f4f8; padding: 10px; }")
        logos_layout = QGridLayout()
        pixmap_logo = QPixmap("/Users/evanj/Downloads/logo_v2.png")
        self.logo_label = QLabel()
        self.logo_label.setPixmap(pixmap_logo)
        self.logo_label.setScaledContents(True)
        self.logo_label.setFixedSize(150, 150)
        self.opacity_effect = QGraphicsOpacityEffect(self.logo_label)
        self.opacity_effect.setOpacity(0.7)  # Set opacity (0.0 for fully transparent, 1.0 for fully opaque)
        self.logo_label.setGraphicsEffect(self.opacity_effect)
        logos_layout.addWidget(self.logo_label, 0, 2)
        logos_group.setLayout(logos_layout)
        logos_group.setMaximumHeight(175)
        left_layout.addWidget(logos_group)

        main_layout.addLayout(left_layout) 

        # Middle layout: Column Selector + Instructions
        middle_layout = QVBoxLayout()

        self.columns_label = QLabel("Selected Columns: []")
        self.columns = [f"A{i}" for i in range(1, 13)] + [f"B{i}" for i in range(1, 13)]
        self.selected_columns = []
        column_group = QGroupBox("Column Selector")
        column_group.setStyleSheet("QGroupBox { background-color: #f2f2f2; border: 1px solid #cccccc; padding: 10px; }")
        column_layout = QGridLayout()
        self.column_buttons = []
        for i, col in enumerate(self.columns):
            btn = QPushButton(col)
            btn.setFixedSize(60, 30)
            btn.setCheckable(True)
            btn.clicked.connect(lambda checked, b=btn, c=i: self.toggle_column(b, c))
            self.column_buttons.append(btn)
            column_layout.addWidget(btn, i // 12, i % 12)
        column_layout.addWidget(self.columns_label, 2, 0, 1, 12)
        column_group.setLayout(column_layout)
        
        # Shrink height of the column_group by limiting max height
        column_group.setMaximumHeight(150)  # adjust as needed for "shorter" box
        column_group.setMaximumWidth(670)
        middle_layout.addWidget(column_group)


        self.output_name_input.setFixedHeight(25)
        self.file_path_input.setFixedHeight(25)
        self.substrate_number.setFixedHeight(25)
        self.substrate_dilution.setFixedHeight(25)
        self.substrate_max.setFixedHeight(25)
        self.time_min.setFixedHeight(25)
        self.time_max.setFixedHeight(25)
        self.time_step.setFixedHeight(25)
        self.data_type_combo.setFixedHeight(25)

        # Add graph display button below instructions (if you want it here)
        self.graph_button = QPushButton("Display Graph")
        self.graph_button.setStyleSheet("background-color: #3399cc; color: white;")
        middle_layout.addWidget(self.graph_button)
        self.graph_button.clicked.connect(self.display_graph)

        # Image Display Area (Center)
        
        self.display_group = QGroupBox("Graph Display")
        self.display_group.setStyleSheet("QGroupBox { background-color: #ffffff; border: 1px solid #cccccc; padding: 10px; }")
        self.display_layout = QGridLayout()
        
        self.image_display = QLabel()
        #self.image_display.setFixedSize(600, 400)
        self.image_display.setStyleSheet("background-color: white; border: 1px solid #ccc;")

        middle_layout.insertWidget(1, self.image_display)

        main_layout.addLayout(middle_layout)

        # Right side layout: Tabs
        right_layout = QVBoxLayout()

        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("QTabWidget::pane { background: #dfd4ff; border: 1px solid #b498ff; padding: 10px }")
        self.tab_hill = QWidget()
        self.tab_mm = QWidget()
        self.tab_inhib = QWidget()

        self.tabs.addTab(self.tab_hill, "Hill")
        self.tabs.addTab(self.tab_mm, "Michaelis-Menten")
        """self.tabs.addTab(self.tab_inhib, "Inhibition")"""

        self.setup_tabs()
        right_layout.addWidget(self.tabs)


        pixmap = QPixmap("/Users/evanj/Downloads/Cat Scientist at Work.png")

        # Create a QLabel and set the pixmap
        image_label = QLabel()
        image_label.setPixmap(pixmap)
        image_label.setScaledContents(True)  # optional: scale image to fit label size

        # Optionally set fixed size for the label
        image_label.setFixedSize(350, 500)  # adjust width, height to your liking

        # Add this label to a layout, e.g. next to your tabs or buttons
        right_layout.addWidget(image_label)
        
        main_layout.addLayout(right_layout)

        self.help_button = QPushButton("Help")
        self.help_button.setStyleSheet("background-color: #C41E3A; color: white;")
        self.help_button.clicked.connect(self.open_help_window)
        right_layout.addWidget(self.help_button)
        

        # Welcome label centered at bottom spanning width
        self.welcome_label = QLabel(
            "Welcome to KAT, the Kinetic Analysis Toolkit!\n"
            "Load CSV, set parameters, then run analysis."
        )
        self.welcome_label.setFont(QFont("Times New Roman", 20))
        self.welcome_label.setAlignment(Qt.AlignCenter)
        self.welcome_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)

        # Add welcome label to a new vertical layout below main layout
        outer_layout = QVBoxLayout()
        outer_layout.addLayout(main_layout)
        outer_layout.addWidget(self.welcome_label)

        self.central_widget.setLayout(outer_layout)

    def setup_tabs(self):
        hill_layout = QVBoxLayout()
        hill_averages = os.path.join(SCRIPTS_DIR, 'hill-averages_winset.py')
        hill_layout.addWidget(self.make_script_button("Graph Averages Hill", hill_averages))
        hill_bestfit = os.path.join(SCRIPTS_DIR, 'hill-best_fit.py')
        hill_layout.addWidget(self.make_script_button("Graph Best Fit Hill", hill_bestfit))
        self.tab_hill.setLayout(hill_layout)

        mm_layout = QVBoxLayout()
        mm_layout.addWidget(self.make_script_button("Graph Averages M-M", os.path.join(SCRIPTS_DIR, 'mm-averages.py')))
        mm_layout.addWidget(self.make_script_button("Graph Best Fit M-M", os.path.join(SCRIPTS_DIR, 'mm-best_fit.py')))
        self.tab_mm.setLayout(mm_layout)

    """
        inhib_layout = QVBoxLayout()
        inhib_layout.addWidget(self.make_script_button("Competitive?", "../scripts/comp-averages.py"))
        inhib_layout.addWidget(self.make_script_button("Uncompetitive?", "../scripts/hill-averages_winset.py"))
        inhib_layout.addWidget(self.make_script_button("Non-Competitive?", "../scripts/hill-averages_winset.py"))
        self.tab_inhib.setLayout(inhib_layout)
    """

    def make_script_button(self, label, script):
        btn = QPushButton(label)
        btn.clicked.connect(lambda: self.run_script(script))
        return btn

    def toggle_column(self, button, index):
        if index in self.selected_columns:
            self.selected_columns.remove(index)
            button.setStyleSheet("")
        else:
            self.selected_columns.append(index)
            button.setStyleSheet("background-color: lightgreen")
        self.columns_label.setText(f"Selected Columns: {self.selected_columns}")

    def select_file(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        path, _ = QFileDialog.getOpenFileName(self, "Select CSV File", "", "CSV Files (*.csv);;All Files (*)", options=options)
        if path is not None:
            self.file_path_input.setText(path)
            with open("path_data.txt", "w") as f:
                f.write(f"{self.file_path_input.text()}")
                f.write("\n")
        else:
            QMessageBox.warning(self, 'Critical', 'More Inputs Required')

    def run_script(self, script_path):
        if self.selected_columns is not None:
            with open("column_data.txt", "w") as f:
                f.write(f'{self.selected_columns}')
                f.write("\n")
        if self.substrate_number.text() is not None:
            with open("substrate_data.txt", "w") as f:
                f.write(self.substrate_number.text())
                f.write("\n")
        else:
            QMessageBox.warning(self, 'Warning', 'More Inputs Required')
        if self.substrate_dilution.text() is not None:
            with open("substrate_data.txt", "a") as f:
                f.write(self.substrate_dilution.text())
                f.write("\n")
        else:
            QMessageBox.warning(self, 'Warning', 'More Inputs Required')
        if self.substrate_max.text() is not None:
            with open("substrate_data.txt", "a") as f:
                f.write(self.substrate_max.text())
                f.write("\n")
        else:
            QMessageBox.warning(self, 'Warning', 'More Inputs Required')

        if self.time_min.text() is not None:
            with open("time_data.txt", "w") as f:
                f.write(self.time_min.text())
                f.write("\n")
        else:
            QMessageBox.warning(self, 'Warning', 'More Inputs Required')
        if self.time_max.text() is not None:
            with open("time_data.txt", "a") as f:
                f.write(self.time_max.text())
                f.write("\n")
        else:
            QMessageBox.warning(self, 'Warning', 'More Inputs Required')
        if self.time_step.text() is not None:
            with open("time_data.txt", "a") as f:
                f.write(self.time_step.text())
                f.write("\n")
        else:
            QMessageBox.warning(self, 'Warning', 'More Inputs Required')

        if self.output_name_input.text() is not None:
            with open("name_data.txt", "w") as f:
                f.write(self.output_name_input.text())
                f.write("\n")
        else:
            QMessageBox.warning(self, 'Warning', 'More Inputs Required')
        
        try:
            subprocess.run(['python', script_path], check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error running script: {e}")
        except FileNotFoundError:
            print("Script not found. Check path.")

    def display_graph(self):
        filename = self.output_name_input.text().strip()
        if not filename:
            print("No filename specified.")
            return

        image_path = f"{filename}.png"
        if not os.path.join(f'{WORKING_DIR}', f'{filename}.png'):
            print(f"Image '{image_path}' not found.")
            return

        pixmap = QPixmap(image_path)
        scaled_pixmap = pixmap.scaled(
            self.image_display.width(), self.image_display.height(),
            Qt.KeepAspectRatio, Qt.SmoothTransformation
        )
        self.image_display.setPixmap(scaled_pixmap)

    def open_help_window(self):
        self.help_window = HelpWindow()
        self.help_window.show()      


# In[4]:


if __name__ == "__main__":
    try:
        app = QApplication(sys.argv)
        window = KineticAnalysisTool()
        window.show()
        sys.exit(app.exec_())
    except Exception as e:
        print("An error occurred:", e)


# In[ ]:




